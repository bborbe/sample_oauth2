// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/sample_oauth2/pkg"
)

type StateGenerator struct {
	DecodeStub        func(context.Context, string) (pkg.State, error)
	decodeMutex       sync.RWMutex
	decodeArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	decodeReturns struct {
		result1 pkg.State
		result2 error
	}
	decodeReturnsOnCall map[int]struct {
		result1 pkg.State
		result2 error
	}
	GenerateStub        func(context.Context, string) (pkg.State, error)
	generateMutex       sync.RWMutex
	generateArgsForCall []struct {
		arg1 context.Context
		arg2 string
	}
	generateReturns struct {
		result1 pkg.State
		result2 error
	}
	generateReturnsOnCall map[int]struct {
		result1 pkg.State
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StateGenerator) Decode(arg1 context.Context, arg2 string) (pkg.State, error) {
	fake.decodeMutex.Lock()
	ret, specificReturn := fake.decodeReturnsOnCall[len(fake.decodeArgsForCall)]
	fake.decodeArgsForCall = append(fake.decodeArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.DecodeStub
	fakeReturns := fake.decodeReturns
	fake.recordInvocation("Decode", []interface{}{arg1, arg2})
	fake.decodeMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *StateGenerator) DecodeCallCount() int {
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	return len(fake.decodeArgsForCall)
}

func (fake *StateGenerator) DecodeCalls(stub func(context.Context, string) (pkg.State, error)) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = stub
}

func (fake *StateGenerator) DecodeArgsForCall(i int) (context.Context, string) {
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	argsForCall := fake.decodeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *StateGenerator) DecodeReturns(result1 pkg.State, result2 error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = nil
	fake.decodeReturns = struct {
		result1 pkg.State
		result2 error
	}{result1, result2}
}

func (fake *StateGenerator) DecodeReturnsOnCall(i int, result1 pkg.State, result2 error) {
	fake.decodeMutex.Lock()
	defer fake.decodeMutex.Unlock()
	fake.DecodeStub = nil
	if fake.decodeReturnsOnCall == nil {
		fake.decodeReturnsOnCall = make(map[int]struct {
			result1 pkg.State
			result2 error
		})
	}
	fake.decodeReturnsOnCall[i] = struct {
		result1 pkg.State
		result2 error
	}{result1, result2}
}

func (fake *StateGenerator) Generate(arg1 context.Context, arg2 string) (pkg.State, error) {
	fake.generateMutex.Lock()
	ret, specificReturn := fake.generateReturnsOnCall[len(fake.generateArgsForCall)]
	fake.generateArgsForCall = append(fake.generateArgsForCall, struct {
		arg1 context.Context
		arg2 string
	}{arg1, arg2})
	stub := fake.GenerateStub
	fakeReturns := fake.generateReturns
	fake.recordInvocation("Generate", []interface{}{arg1, arg2})
	fake.generateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *StateGenerator) GenerateCallCount() int {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	return len(fake.generateArgsForCall)
}

func (fake *StateGenerator) GenerateCalls(stub func(context.Context, string) (pkg.State, error)) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = stub
}

func (fake *StateGenerator) GenerateArgsForCall(i int) (context.Context, string) {
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	argsForCall := fake.generateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *StateGenerator) GenerateReturns(result1 pkg.State, result2 error) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = nil
	fake.generateReturns = struct {
		result1 pkg.State
		result2 error
	}{result1, result2}
}

func (fake *StateGenerator) GenerateReturnsOnCall(i int, result1 pkg.State, result2 error) {
	fake.generateMutex.Lock()
	defer fake.generateMutex.Unlock()
	fake.GenerateStub = nil
	if fake.generateReturnsOnCall == nil {
		fake.generateReturnsOnCall = make(map[int]struct {
			result1 pkg.State
			result2 error
		})
	}
	fake.generateReturnsOnCall[i] = struct {
		result1 pkg.State
		result2 error
	}{result1, result2}
}

func (fake *StateGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.decodeMutex.RLock()
	defer fake.decodeMutex.RUnlock()
	fake.generateMutex.RLock()
	defer fake.generateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *StateGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg.StateGenerator = new(StateGenerator)
