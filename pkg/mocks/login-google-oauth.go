// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/bborbe/sample_oauth2/pkg"
)

type GoogleOAuth struct {
	AuthCodeURLStub        func(pkg.State) string
	authCodeURLMutex       sync.RWMutex
	authCodeURLArgsForCall []struct {
		arg1 pkg.State
	}
	authCodeURLReturns struct {
		result1 string
	}
	authCodeURLReturnsOnCall map[int]struct {
		result1 string
	}
	UserInfoStub        func(context.Context, pkg.Code) (*pkg.UserInfo, error)
	userInfoMutex       sync.RWMutex
	userInfoArgsForCall []struct {
		arg1 context.Context
		arg2 pkg.Code
	}
	userInfoReturns struct {
		result1 *pkg.UserInfo
		result2 error
	}
	userInfoReturnsOnCall map[int]struct {
		result1 *pkg.UserInfo
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *GoogleOAuth) AuthCodeURL(arg1 pkg.State) string {
	fake.authCodeURLMutex.Lock()
	ret, specificReturn := fake.authCodeURLReturnsOnCall[len(fake.authCodeURLArgsForCall)]
	fake.authCodeURLArgsForCall = append(fake.authCodeURLArgsForCall, struct {
		arg1 pkg.State
	}{arg1})
	stub := fake.AuthCodeURLStub
	fakeReturns := fake.authCodeURLReturns
	fake.recordInvocation("AuthCodeURL", []interface{}{arg1})
	fake.authCodeURLMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *GoogleOAuth) AuthCodeURLCallCount() int {
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	return len(fake.authCodeURLArgsForCall)
}

func (fake *GoogleOAuth) AuthCodeURLCalls(stub func(pkg.State) string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = stub
}

func (fake *GoogleOAuth) AuthCodeURLArgsForCall(i int) pkg.State {
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	argsForCall := fake.authCodeURLArgsForCall[i]
	return argsForCall.arg1
}

func (fake *GoogleOAuth) AuthCodeURLReturns(result1 string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = nil
	fake.authCodeURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *GoogleOAuth) AuthCodeURLReturnsOnCall(i int, result1 string) {
	fake.authCodeURLMutex.Lock()
	defer fake.authCodeURLMutex.Unlock()
	fake.AuthCodeURLStub = nil
	if fake.authCodeURLReturnsOnCall == nil {
		fake.authCodeURLReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.authCodeURLReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *GoogleOAuth) UserInfo(arg1 context.Context, arg2 pkg.Code) (*pkg.UserInfo, error) {
	fake.userInfoMutex.Lock()
	ret, specificReturn := fake.userInfoReturnsOnCall[len(fake.userInfoArgsForCall)]
	fake.userInfoArgsForCall = append(fake.userInfoArgsForCall, struct {
		arg1 context.Context
		arg2 pkg.Code
	}{arg1, arg2})
	stub := fake.UserInfoStub
	fakeReturns := fake.userInfoReturns
	fake.recordInvocation("UserInfo", []interface{}{arg1, arg2})
	fake.userInfoMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *GoogleOAuth) UserInfoCallCount() int {
	fake.userInfoMutex.RLock()
	defer fake.userInfoMutex.RUnlock()
	return len(fake.userInfoArgsForCall)
}

func (fake *GoogleOAuth) UserInfoCalls(stub func(context.Context, pkg.Code) (*pkg.UserInfo, error)) {
	fake.userInfoMutex.Lock()
	defer fake.userInfoMutex.Unlock()
	fake.UserInfoStub = stub
}

func (fake *GoogleOAuth) UserInfoArgsForCall(i int) (context.Context, pkg.Code) {
	fake.userInfoMutex.RLock()
	defer fake.userInfoMutex.RUnlock()
	argsForCall := fake.userInfoArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *GoogleOAuth) UserInfoReturns(result1 *pkg.UserInfo, result2 error) {
	fake.userInfoMutex.Lock()
	defer fake.userInfoMutex.Unlock()
	fake.UserInfoStub = nil
	fake.userInfoReturns = struct {
		result1 *pkg.UserInfo
		result2 error
	}{result1, result2}
}

func (fake *GoogleOAuth) UserInfoReturnsOnCall(i int, result1 *pkg.UserInfo, result2 error) {
	fake.userInfoMutex.Lock()
	defer fake.userInfoMutex.Unlock()
	fake.UserInfoStub = nil
	if fake.userInfoReturnsOnCall == nil {
		fake.userInfoReturnsOnCall = make(map[int]struct {
			result1 *pkg.UserInfo
			result2 error
		})
	}
	fake.userInfoReturnsOnCall[i] = struct {
		result1 *pkg.UserInfo
		result2 error
	}{result1, result2}
}

func (fake *GoogleOAuth) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.authCodeURLMutex.RLock()
	defer fake.authCodeURLMutex.RUnlock()
	fake.userInfoMutex.RLock()
	defer fake.userInfoMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *GoogleOAuth) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ pkg.GoogleOAuth = new(GoogleOAuth)
